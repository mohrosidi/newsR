"tl", "tr", "tw", "uk", "ur", "vi")){
stop(paste('Please specify lang using "af", "ar", "bg", "bn", "ca","cn", "cs",',
'"cy", "da", "de", "el", "en", "es", "et",',
'"fa", "fi", "fr", "gu", "he","hi", "hr",',
'"hu", "id", "it", "ja", "kn", "ko", "lt",',
'"lv", "mk", "ml", "mr", "ne", "nl", "no",',
'"pa", "pl", "pt", "ro", "ru", "sk", "sl",',
'"so", "sq", "sv", "sw", "ta", "te", "th",',
'"tl", "tr", "tw", "uk", "ur", or "vi"'))
}
}
## Check country
if(!is.null(country)){
if(length(country)>1){
stop(paste("Please provide only one country"))
}
}
## Make sure an API key is provided
if (nchar(api_key) == 0)
stop(
paste0(
"You did not specify your API key as an argument or as a global variable.",
" See documentation for further info."
)
)
# Query to api ----
api_host <- "newscatcher.p.rapidapi.com"
query_params <- list(topic = topic,
lang = lang,
country = country,
media = media
)
url <- parse_url(url =  "https://newscatcher.p.rapidapi.com/v1/latest_headlines")
url$scheme <- "https"
url$query <- query_params
## parse the data
resp <- GET(url, add_headers("x-rapidapi-host" = api_host, "x-rapidapi-key" = api_key))
parsed <- fromJSON(
content(
resp, as = "text", type = "application/json", encoding = "UTF-8"
),
flatten = TRUE
)
return(parsed)
}
newscatcher_headlines(topic = "news", api_key = "23cc2a4b35msh622322b83ef2752p199f25jsnb5865ee36ce0")
x<- newscatcher_headlines(topic = "news", api_key = "23cc2a4b35msh622322b83ef2752p199f25jsnb5865ee36ce0")
View(x)
x[["articles"]]
x[["articles"]] %>% tibble::as_tibble()
newscatcher_search <- function(keyword = NULL,
ranked_only = NULL,
search_in = NULL,
not_sources = NULL,
sort_by = "relevancy",
sources = NULL,
to_rank = NULL,
to = NULL,
from = NULL,
topic = NULL,
page_size = 50,
lang = NULL,
country = NULL,
page = 1,
from_rank = NULL,
get_all = FALSE,
api_key = Sys.getenv("NEWS_API_KEY")){
# error and warning handling -----
if(all(map_lgl(list(keyword, ranked_only, search_in, not_sources, sources, to_rank, to, from, topic, lang, country, from_rank))))
stop(paste("Please specify at least keyword"))
## Check search_in
if(!is.null(search_in)){
if(length(search_in)>1){
stop(paste("Please specify a search_in"))
if(!search_in %in% c("title", "summary"))
stop(paste("Please provide title or summary"))
}
}
## Check not_sources
if(!is.null(not_sources)){
if(length(not_sources)>1)
not_sources <- paste(not_sources, collapse = ",")
}
## Check sort_by
if(!is.null(sort_by)){
if(length(sort_by)>1)
stop(paste("Please specify a sort_by type. eg: relevancy, date, or rank "))
}
## Check sources
if(!is.null(sources)){
if(length(sources)>1)
sources <- paste(sources, collapse = ",")
}
## Check to_rank
if(!is.null(to_rank)){
if(!to_rank %in% c(0:999999)){
stop(paste("Please provide  a number between 0 and 999999"))
}
}
## Check topic
if(!is.null(topic)){
if(!topic %in% c("news", "sport", "tech", "world", "finance", "politics",
"business", "economics", "entertainment")){
stop(paste('topic must be "news", "sport", "tech", "world", "finance", "politics",',
'"business", "economics", or "entertainment"'))
}
if(length(topic) > 1){
stop(paste("Please provide only one topic"))
}
}
## Check page_size
if(!is.null(page_size)){
if(page_size > 100)
stop(paste("Maximum page_size is 100"))
}
## Check lang
if(!is.null(lang)){
if(length(lang)>1){
stop(paste("Please provide at least a lang"))
}
if(!lang %in% c("af", "ar", "bg", "bn", "ca","cn", "cs",
"cy", "da", "de", "el", "en", "es", "et",
"fa", "fi", "fr", "gu", "he","hi", "hr",
"hu", "id", "it", "ja", "kn", "ko", "lt",
"lv", "mk", "ml", "mr", "ne", "nl", "no",
"pa", "pl", "pt", "ro", "ru", "sk", "sl",
"so", "sq", "sv", "sw", "ta", "te", "th",
"tl", "tr", "tw", "uk", "ur", "vi")){
stop(paste('Please specify lang using "af", "ar", "bg", "bn", "ca","cn", "cs",',
'"cy", "da", "de", "el", "en", "es", "et",',
'"fa", "fi", "fr", "gu", "he","hi", "hr",',
'"hu", "id", "it", "ja", "kn", "ko", "lt",',
'"lv", "mk", "ml", "mr", "ne", "nl", "no",',
'"pa", "pl", "pt", "ro", "ru", "sk", "sl",',
'"so", "sq", "sv", "sw", "ta", "te", "th",',
'"tl", "tr", "tw", "uk", "ur", or "vi"'))
}
}
## Check from_rank
if(!is.null(from_rank)){
if(!from_rank %in% c(0:999999)){
stop(paste("Please provide  a number between 0 and 999999"))
}
}
## Check api_key
if (nchar(api_key) == 0){
stop(paste("You did not correctly specify your API key neither as global",
"variable nor with the function call. See documentation for",
"further info."))
}
## Check api_key
if (nchar(api_key) == 0){
stop(paste("You did not correctly specify your API key neither as global",
"variable nor with the function call. See documentation for",
"further info."))
}
# Query to api ----
api_host <- "newscatcher.p.rapidapi.com"
query_params <- list(ranked_only = ranked_only,
search_in = search_in,
not_sources = not_sources,
sort_by = sort_by,
sources = sources,
to_rank = to_rank,
to = to,
from = from,
topic = topic,
page_size = page_size,
lang = lang,
country = country,
page = page,
from_rank = from_rank,
q = keyword
)
url <- parse_url(url =  "https://newscatcher.p.rapidapi.com/v1/search")
url$scheme <- "https"
url$query <- query_params
## parse the data
resp <- GET(url, add_headers("x-rapidapi-host" = api_host, "x-rapidapi-key" = api_key))
parsed <- fromJSON(
content(
resp, as = "text", type = "application/json", encoding = "UTF-8"
),
flatten = TRUE
)
tidy_data <- parsed %>% pluck(2) %>% as_tibble()
return(tidy_data)
}
newscatcher_search(keyword = "jokowi", api_key = "23cc2a4b35msh622322b83ef2752p199f25jsnb5865ee36ce0")
library(purrr)
library(tidyverse)
library(httr)
library(jsonlite)
library(tibble)
newscatcher_search(keyword = "jokowi", api_key = "23cc2a4b35msh622322b83ef2752p199f25jsnb5865ee36ce0")
newscatcher_search <- function(keyword = NULL,
ranked_only = NULL,
search_in = NULL,
not_sources = NULL,
sort_by = "relevancy",
sources = NULL,
to_rank = NULL,
to = NULL,
from = NULL,
topic = NULL,
page_size = 50,
lang = NULL,
country = NULL,
page = 1,
from_rank = NULL,
get_all = FALSE,
api_key = Sys.getenv("NEWS_API_KEY")){
# error and warning handling -----
if(all(map_lgl(list(keyword, ranked_only, search_in, not_sources, sources, to_rank, to, from, topic, lang, country, from_rank), is.null)))
stop(paste("Please specify at least keyword"))
## Check search_in
if(!is.null(search_in)){
if(length(search_in)>1){
stop(paste("Please specify a search_in"))
if(!search_in %in% c("title", "summary"))
stop(paste("Please provide title or summary"))
}
}
## Check not_sources
if(!is.null(not_sources)){
if(length(not_sources)>1)
not_sources <- paste(not_sources, collapse = ",")
}
## Check sort_by
if(!is.null(sort_by)){
if(length(sort_by)>1)
stop(paste("Please specify a sort_by type. eg: relevancy, date, or rank "))
}
## Check sources
if(!is.null(sources)){
if(length(sources)>1)
sources <- paste(sources, collapse = ",")
}
## Check to_rank
if(!is.null(to_rank)){
if(!to_rank %in% c(0:999999)){
stop(paste("Please provide  a number between 0 and 999999"))
}
}
## Check topic
if(!is.null(topic)){
if(!topic %in% c("news", "sport", "tech", "world", "finance", "politics",
"business", "economics", "entertainment")){
stop(paste('topic must be "news", "sport", "tech", "world", "finance", "politics",',
'"business", "economics", or "entertainment"'))
}
if(length(topic) > 1){
stop(paste("Please provide only one topic"))
}
}
## Check page_size
if(!is.null(page_size)){
if(page_size > 100)
stop(paste("Maximum page_size is 100"))
}
## Check lang
if(!is.null(lang)){
if(length(lang)>1){
stop(paste("Please provide at least a lang"))
}
if(!lang %in% c("af", "ar", "bg", "bn", "ca","cn", "cs",
"cy", "da", "de", "el", "en", "es", "et",
"fa", "fi", "fr", "gu", "he","hi", "hr",
"hu", "id", "it", "ja", "kn", "ko", "lt",
"lv", "mk", "ml", "mr", "ne", "nl", "no",
"pa", "pl", "pt", "ro", "ru", "sk", "sl",
"so", "sq", "sv", "sw", "ta", "te", "th",
"tl", "tr", "tw", "uk", "ur", "vi")){
stop(paste('Please specify lang using "af", "ar", "bg", "bn", "ca","cn", "cs",',
'"cy", "da", "de", "el", "en", "es", "et",',
'"fa", "fi", "fr", "gu", "he","hi", "hr",',
'"hu", "id", "it", "ja", "kn", "ko", "lt",',
'"lv", "mk", "ml", "mr", "ne", "nl", "no",',
'"pa", "pl", "pt", "ro", "ru", "sk", "sl",',
'"so", "sq", "sv", "sw", "ta", "te", "th",',
'"tl", "tr", "tw", "uk", "ur", or "vi"'))
}
}
## Check from_rank
if(!is.null(from_rank)){
if(!from_rank %in% c(0:999999)){
stop(paste("Please provide  a number between 0 and 999999"))
}
}
## Check api_key
if (nchar(api_key) == 0){
stop(paste("You did not correctly specify your API key neither as global",
"variable nor with the function call. See documentation for",
"further info."))
}
## Check api_key
if (nchar(api_key) == 0){
stop(paste("You did not correctly specify your API key neither as global",
"variable nor with the function call. See documentation for",
"further info."))
}
# Query to api ----
api_host <- "newscatcher.p.rapidapi.com"
query_params <- list(ranked_only = ranked_only,
search_in = search_in,
not_sources = not_sources,
sort_by = sort_by,
sources = sources,
to_rank = to_rank,
to = to,
from = from,
topic = topic,
page_size = page_size,
lang = lang,
country = country,
page = page,
from_rank = from_rank,
q = keyword
)
url <- parse_url(url =  "https://newscatcher.p.rapidapi.com/v1/search")
url$scheme <- "https"
url$query <- query_params
## parse the data
resp <- GET(url, add_headers("x-rapidapi-host" = api_host, "x-rapidapi-key" = api_key))
parsed <- fromJSON(
content(
resp, as = "text", type = "application/json", encoding = "UTF-8"
),
flatten = TRUE
)
tidy_data <- parsed %>% pluck(2) %>% as_tibble()
return(tidy_data)
}
newscatcher_search(keyword = "jokowi", api_key = "23cc2a4b35msh622322b83ef2752p199f25jsnb5865ee36ce0")
newscatcher_search(keyword = "jokowi", page_size = 5,api_key = "23cc2a4b35msh622322b83ef2752p199f25jsnb5865ee36ce0")
x<- newscatcher_search(keyword = "jokowi", page_size = 4,api_key = "23cc2a4b35msh622322b83ef2752p199f25jsnb5865ee36ce0")
View(x)
newscatcher_search <- function(keyword = NULL,
ranked_only = NULL,
search_in = NULL,
not_sources = NULL,
sort_by = "relevancy",
sources = NULL,
to_rank = NULL,
to = NULL,
from = NULL,
topic = NULL,
page_size = 50,
lang = NULL,
country = NULL,
page = 1,
from_rank = NULL,
get_all = FALSE,
api_key = Sys.getenv("NEWS_API_KEY")){
# error and warning handling -----
if(all(map_lgl(list(keyword, ranked_only, search_in, not_sources, sources, to_rank, to, from, topic, lang, country, from_rank), is.null)))
stop(paste("Please specify at least keyword"))
## Check search_in
if(!is.null(search_in)){
if(length(search_in)>1){
stop(paste("Please specify a search_in"))
if(!search_in %in% c("title", "summary"))
stop(paste("Please provide title or summary"))
}
}
## Check not_sources
if(!is.null(not_sources)){
if(length(not_sources)>1)
not_sources <- paste(not_sources, collapse = ",")
}
## Check sort_by
if(!is.null(sort_by)){
if(length(sort_by)>1)
stop(paste("Please specify a sort_by type. eg: relevancy, date, or rank "))
}
## Check sources
if(!is.null(sources)){
if(length(sources)>1)
sources <- paste(sources, collapse = ",")
}
## Check to_rank
if(!is.null(to_rank)){
if(!to_rank %in% c(0:999999)){
stop(paste("Please provide  a number between 0 and 999999"))
}
}
## Check topic
if(!is.null(topic)){
if(!topic %in% c("news", "sport", "tech", "world", "finance", "politics",
"business", "economics", "entertainment")){
stop(paste('topic must be "news", "sport", "tech", "world", "finance", "politics",',
'"business", "economics", or "entertainment"'))
}
if(length(topic) > 1){
stop(paste("Please provide only one topic"))
}
}
## Check page_size
if(!is.null(page_size)){
if(page_size > 100)
stop(paste("Maximum page_size is 100"))
}
## Check lang
if(!is.null(lang)){
if(length(lang)>1){
stop(paste("Please provide at least a lang"))
}
if(!lang %in% c("af", "ar", "bg", "bn", "ca","cn", "cs",
"cy", "da", "de", "el", "en", "es", "et",
"fa", "fi", "fr", "gu", "he","hi", "hr",
"hu", "id", "it", "ja", "kn", "ko", "lt",
"lv", "mk", "ml", "mr", "ne", "nl", "no",
"pa", "pl", "pt", "ro", "ru", "sk", "sl",
"so", "sq", "sv", "sw", "ta", "te", "th",
"tl", "tr", "tw", "uk", "ur", "vi")){
stop(paste('Please specify lang using "af", "ar", "bg", "bn", "ca","cn", "cs",',
'"cy", "da", "de", "el", "en", "es", "et",',
'"fa", "fi", "fr", "gu", "he","hi", "hr",',
'"hu", "id", "it", "ja", "kn", "ko", "lt",',
'"lv", "mk", "ml", "mr", "ne", "nl", "no",',
'"pa", "pl", "pt", "ro", "ru", "sk", "sl",',
'"so", "sq", "sv", "sw", "ta", "te", "th",',
'"tl", "tr", "tw", "uk", "ur", or "vi"'))
}
}
## Check from_rank
if(!is.null(from_rank)){
if(!from_rank %in% c(0:999999)){
stop(paste("Please provide  a number between 0 and 999999"))
}
}
## Check api_key
if (nchar(api_key) == 0){
stop(paste("You did not correctly specify your API key neither as global",
"variable nor with the function call. See documentation for",
"further info."))
}
## Check api_key
if (nchar(api_key) == 0){
stop(paste("You did not correctly specify your API key neither as global",
"variable nor with the function call. See documentation for",
"further info."))
}
# Query to api ----
api_host <- "newscatcher.p.rapidapi.com"
query_params <- list(ranked_only = ranked_only,
search_in = search_in,
not_sources = not_sources,
sort_by = sort_by,
sources = sources,
to_rank = to_rank,
to = to,
from = from,
topic = topic,
page_size = page_size,
lang = lang,
country = country,
page = page,
from_rank = from_rank,
q = keyword
)
url <- parse_url(url =  "https://newscatcher.p.rapidapi.com/v1/search")
url$scheme <- "https"
url$query <- query_params
## parse the data
resp <- GET(url, add_headers("x-rapidapi-host" = api_host, "x-rapidapi-key" = api_key))
parsed <- fromJSON(
content(
resp, as = "text", type = "application/json", encoding = "UTF-8"
),
flatten = TRUE
)
}
x<- newscatcher_search(keyword = "jokowi", page_size = 4,api_key = "23cc2a4b35msh622322b83ef2752p199f25jsnb5865ee36ce0")
View(x)
x[["articles"]]
newsR::newscatcher_searchfree(keyword = "Trump", get_all = TRUE, api_key = "23cc2a4b35msh622322b83ef2752p199f25jsnb5865ee36ce0")
newsR::newscatcher_searchfree(keyword = "Trump", get_all = TRUE, api_key = "23cc2a4b35msh622322b83ef2752p199f25jsnb5865ee36ce0")
newsR::news_everything(keyword = "Trump", get_all = TRUE, api_key = "dec7dc7eec124dbfb2adb9034c71b0bd")
api_key <- "dec7dc7eec124dbfb2adb9034c71b0bd"
?newsR::newscatcher_aggregation
?newsR::newscatcher_search
?newsR::newscatcher_stocks
library(newsR)
newsR::set_api_key(".")
newsR::set_api_key("api")
newsR::news_everything(keyword = "Reklamasi Jakarta") -> df
newsR::set_api_key("api")
newsR::news_everything(keyword = "Reklamasi Jakarta") -> df
newsR::news_everything(keyword = "Reklamasi Jakarta", api_key = "dec7dc7eec124dbfb2adb9034c71b0bd") -> df
View(df)
newsR::news_everything(keyword = "Omnibus Law", api_key = "dec7dc7eec124dbfb2adb9034c71b0bd") -> df
View(df)
newsR::news_everything(keyword = "Champions league", api_key = "dec7dc7eec124dbfb2adb9034c71b0bd") -> df
newsR::news_everything(keyword = "Omnibus Law", get_all = TRUE, api_key = "dec7dc7eec124dbfb2adb9034c71b0bd") -> df
View(df)
df
df <- newsR::news_everything(keyword = "gojek", api_key = "dec7dc7eec124dbfb2adb9034c71b0bd")
df <- newsR::news_everything(keyword = "gojek", get_all = TRUE, api_key = "dec7dc7eec124dbfb2adb9034c71b0bd")
View(df)
readr::write_csv(df, "gojek.csv")
df <- newsR::news_everything(keyword = "gojek indonesia", get_all = TRUE, api_key = "dec7dc7eec124dbfb2adb9034c71b0bd")
View(df)
df <- newsR::news_everything(keyword = "PSBB Jakarta", get_all = TRUE, api_key = "dec7dc7eec124dbfb2adb9034c71b0bd")
View(df)
df <- newsR::news_everything(keyword = "HUT RI", get_all = TRUE, api_key = "dec7dc7eec124dbfb2adb9034c71b0bd")
View(df)
df <- newsR::news_everything(keyword = "HUT", get_all = TRUE, api_key = "dec7dc7eec124dbfb2adb9034c71b0bd")
View(df)
df <- newsR::news_everything(keyword = "Hari Kemerdekaan", get_all = TRUE, api_key = "dec7dc7eec124dbfb2adb9034c71b0bd")
View(df)
df <- newsR::news_everything(keyword = "pilkada surabaya", get_all = TRUE, api_key = "dec7dc7eec124dbfb2adb9034c71b0bd")
